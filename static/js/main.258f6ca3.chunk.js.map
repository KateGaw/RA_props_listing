{"version":3,"sources":["components/Listing.js","App.js","serviceWorker.js","index.js"],"names":["Title","title","length","className","slice","Price","price","code","Quantity","quantity","Listing","items","map","item","index","state","key","listing_id","href","url","src","MainImage","url_570xN","alt","listing_image_id","currency_code","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2/hFAGMA,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OAAIA,EAAMC,QAAU,GAEhB,uBAAGC,UAAU,aAAaF,MAAOA,GAAjC,UAA4CA,EAAMG,MAAM,EAAG,IAA3D,QAIA,uBAAGD,UAAU,aAAaF,MAAOA,GAC9BA,IAMHI,EAAQ,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACtB,MAAa,QAATA,EACK,uBAAGJ,UAAU,cAAb,IAA4BG,GACjB,QAATC,EACF,uBAAGJ,UAAU,cAAb,SAA4BG,GAGjC,uBAAGH,UAAU,cACVG,EADH,IACWC,IAMXC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OAAIA,GAAY,GACL,uBAAGN,UAAU,2BAA2BM,EAAxC,SACAA,GAAY,IAAMA,EAAW,GAC7B,uBAAGN,UAAU,8BAA8BM,EAA3C,SAEA,uBAAGN,UAAU,4BAA4BM,EAAzC,UA6BAC,EAzBC,WAuBd,OAtBiBC,EAAMC,KAAI,SAACC,EAAMC,GAAP,MACV,WAAfD,EAAKE,MACH,yBAAKZ,UAAU,YAAYa,IAAKH,EAAKI,YACnC,yBAAKd,UAAU,QACb,yBAAKA,UAAU,cACb,uBAAGe,KAAML,EAAKM,KACZ,yBACEC,IAAKP,EAAKQ,UAAUC,UACpBC,IAAKV,EAAKQ,UAAUG,qBAI1B,yBAAKrB,UAAU,gBACb,kBAAC,EAAD,CAAOF,MAAOY,EAAKZ,QACnB,kBAAC,EAAD,CAAOK,MAAOO,EAAKP,MAAOC,KAAMM,EAAKY,gBACrC,kBAAC,EAAD,CAAUhB,SAAUI,EAAKJ,cAI7B,SC1COiB,MAdf,WACE,OACE,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,sBAAf,KAA4C,IAC5C,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,qBAAf,KAA2C,KACtC,IACP,yBAAKA,UAAU,UACb,kBAAC,EAAD,OACK,MCFOwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.258f6ca3.chunk.js","sourcesContent":["import React from \"react\";\nimport items from \"./esty.json\";\n\nconst Title = ({ title }) => {\n  if (title.length >= 50) {\n    return (\n      <p className=\"item-title\" title={title}>{`${title.slice(0, 50)}...`}</p>\n    );\n  } else {\n    return (\n      <p className=\"item-title\" title={title}>\n        {title}\n      </p>\n    );\n  }\n};\n\nconst Price = ({ price, code }) => {\n  if (code === \"USD\") {\n    return <p className=\"item-price\">${price}</p>;\n  } else if (code === \"EUR\") {\n    return <p className=\"item-price\">â‚¬{price}</p>;\n  } else {\n    return (\n      <p className=\"item-price\">\n        {price} {code}\n      </p>\n    );\n  }\n};\n\nconst Quantity = ({ quantity }) => {\n    if (quantity <= 10) {\n        return <p className=\"item-quantity level-low\">{quantity} left</p>;\n    } else if (quantity <= 20 && quantity > 10) {\n        return <p className=\"item-quantity level-medium\">{quantity} left</p>;\n    } else {\n        return <p className=\"item-quantity level-high\">{quantity} left</p>;\n    }\n};\n\nconst Listing = () => {\n  const template = items.map((item, index) =>\n    item.state === \"active\" ? (\n      <div className=\"item-list\" key={item.listing_id}>\n        <div className=\"item\">\n          <div className=\"item-image\">\n            <a href={item.url}>\n              <img\n                src={item.MainImage.url_570xN}\n                alt={item.MainImage.listing_image_id}\n              />\n            </a>\n          </div>\n          <div className=\"item-details\">\n            <Title title={item.title} />\n            <Price price={item.price} code={item.currency_code} />\n            <Quantity quantity={item.quantity} />\n          </div>\n        </div>\n      </div>\n    ) : null\n  );\n\n  return template;\n};\nexport default Listing;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Listing from \"./components/Listing\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"background-element\"> </div>{\" \"}\n      <div className=\"highlight-window\">\n        <div className=\"highlight-overlay\"> </div>{\" \"}\n      </div>{\" \"}\n      <div className=\"window\">\n        <Listing />\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}